plugins {
    id 'org.springframework.boot' version '2.1.1.RELEASE'
}

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    compile "org.flywaydb:flyway-core:${flywayVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.9.4"

    compile project(":pet-shop-service")
    compile project(":pet-shop-ui")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: "junit", module: "junit"
    }
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntime "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    testCompile "com.jayway.jsonpath:json-path:2.4.0"
}

if (project.hasProperty('testProfile') && project.testProfile == 'docker') {

    task pullDbImage(type: DockerPullImage) {
        repository = 'postgres'
        tag = 'alpine'
    }

    task createTestDb(type: DockerCreateContainer, dependsOn: pullDbImage) {
        imageId = 'postgres:alpine'
        portBindings = ["${dockerTestDbPort}:5432"]
        envVars = [
                POSTGRES_DB: 'shop_test',
                POSTGRES_USER: 'shop_test',
                POSTGRES_PASSWORD: 'password'
        ]
    }

    task startTestDb(type: DockerStartContainer, dependsOn: createTestDb) {
        targetContainerId createTestDb.containerId
    }

    task stopTestDb(type: DockerStopContainer) {
        targetContainerId createTestDb.containerId
    }

    task destroyTestDb(type: DockerRemoveContainer, dependsOn: stopTestDb) {
        targetContainerId createTestDb.containerId
    }

    test.dependsOn startTestDb
    test.finalizedBy destroyTestDb

    test {
        systemProperty 'test.database.port', "${dockerTestDbPort}"
    }
}

def appBinary = bootJar.archiveFile.get().asFile
def appName = appBinary.name
def appDir = appBinary.parentFile.path

task dockerFile(type: Dockerfile, dependsOn: bootJar) {
    destFile = file("$appDir/Dockerfile")
    from 'openjdk:11-jre-slim'
    addFile appName, "/app/$appName"
    exposePort 9090
    defaultCommand "java", "-jar", "-Dspring.profiles.active=docker", "/app/$appName"
}

task buildImage(type: DockerBuildImage, dependsOn: dockerFile) {
    inputDir = file(appDir)
    imageId = project.name
    tags = [ project.name + ':' + project.version ] as Set
}